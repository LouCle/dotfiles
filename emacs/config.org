* Table of Contents                                                     :TOC: - [[#encoding][Encoding]] - [[#backups][Backups]] - [[#packages][Packages]] - [[#functions][Functions]] - [[#custom-variables][Custom Variables]] - [[#system][System]] - [[#shell-path][Shell Path]] - [[#version-specific][Version-specific]] - [[#gui][GUI]] - [[#appearance][Appearance]] - [[#font][Font]] - [[#theme][Theme]] - [[#tabbar][tabbar]] - [[#evil][evil]] - [[#modeline][Modeline]] - [[#cursor][Cursor]] - [[#interface][Interface]] - [[#splash-screen][Splash Screen]] - [[#lines][Lines]] - [[#line-numbers][Line numbers]] - [[#scrolling][Scrolling]] - [[#confirmation-messages][Confirmation messages]] - [[#bells][Bells]] - [[#dependencies][Dependencies]] - [[#completion-frontend][Completion Frontend]] - [[#ivy][Ivy]] - [[#org][Org]] - [[#programming-related][Programming Related]] - [[#git][Git]] - [[#tramp][TRAMP]] - [[#auto-completion][Auto-Completion]] - [[#checkerslinters][Checkers/Linters]] - [[#languages][Languages]] - [[#editing][Editing]] - [[#navigation][Navigation]] - [[#bindings][Bindings]] - [[#hydra][Hydra]] - [[#community][Community]] - [[#browser][Browser]] - [[#discord][Discord]]
* Encoding

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Hotfix, require in emacs 26.1 due to bug #34341
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-defer nil)
  (setq-default use-package-always-demand t)
  (setq-default use-package-always-ensure t)
  (setq-default byte-compile-warnings nil)
#+END_SRC

* Custom Variables
#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst ign/config-path (concat user-emacs-directory "config.org"))
  (defconst ign/is-a-mac (memq window-system '(mac ns)))
  (defconst ign/python-executable "python3")
  (defconst ign/ipython-executable (if ign/is-a-mac "ipython" "ipython3"))
#+END_SRC

* System
** Shell Path

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))

  (when (memq window-system '(mac ns))
    (setq mac-command-modifier 'meta))
#+END_SRC

** Version-specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font (if ign/is-a-mac "Menlo-18" "DejaVu Sans Mono-12") nil t)

  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :custom-face
    (font-lock-function ((t (:foreground "#e06c75"))))
    :custom
    (doom-vibrant-brighter-comments t)
    (doom-vibrant-brighter-modeline t)
    :config
    (doom-themes-org-config)
    (load-theme 'adwaita t))
#+END_SRC

** Tabs

#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :bind
    ("s-l" . centaur-tabs-forward)
    ("s-h" . centaur-tabs-backward))

  (defun tabbar-buffer-groups ()
    "Returns the list of group names the current buffer belongs to."
    (list
     (cond
; No rules to group all tabs together. I like it this way lmao
      (t
       "General"
       ))))
    #+END_SRC
** evil

#+BEGIN_SRC emacs-lisp

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-default-state 'normal)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    :custom (evil-collection-setup-minibuffer t)
    :init (evil-collection-init)
    (evil-collection-init))

  (use-package which-key
    :demand t
    :config
    (which-key-mode)
    :bind
    ("C-h m" . which-key-show-major-mode)
    ("C-h b" . which-key-show-top-level))

#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable ign/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    (doom-modeline-buffer-file-name-style 'file-name)
    :config
    (doom-modeline-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
  (setq-default cursor-in-non-selected-windows nil)

  (use-package beacon
    :hook
    (focus-in . beacon-blink)
    :config
    (beacon-mode))
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :if (display-graphic-p)
    :bind
    (:map dashboard-mode-map
          ("C-n" . widget-forward)
          ("C-p" . widget-backward))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    (dashboard-set-heading-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `(((,"" "Github" "Github"
         (lambda (&rest _) (browse-url-generic "https://github.com/Lgneous")))
        (,"" "Configuration" "Configuration"
         (lambda (&rest _) (ign/edit-config)))
        (,"" "Reload" "Restart emacs"
         (lambda (&rest _) (ign/reload))))))
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (global-hl-line-mode t))

  (use-package highlight-indent-guides
    :disabled
    :hook
    (prog-mode . (lambda () (setq highlight-indent-guides-character (-> (buffer-name) all-the-icons-icon-for-file string-to-char))))
    (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

** Dependencies

#+BEGIN_SRC emacs-lisp
  (use-package popwin)
  (use-package multi-term
    :custom
    (multi-term-program (ign/find-executables "zsh" "bash" "sh")))
#+END_SRC

* Completion Frontend
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
  ;;  ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-wrap t)
    (ivy-action-wrap t)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode))

  (use-package swiper
    :after ivy
    :bind
    ("C-s" . swiper-isearch))

  ;; This will make counsel-M-x sort candidates by frequency
  (use-package smex)
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.org\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (use-package ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (ocaml . t)
       (gnuplot . t))))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)
#+END_SRC

* Programming Related

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit)

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :custom
    (flycheck-checkers nil)
    :config
    (global-flycheck-mode))
#+END_SRC

** Languages
*** C/C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :hook
    (c-mode . (lambda () (setq indent-tabs-mode t)))
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package ccls
    :hook
    ((c-mode c++-mode) . lsp)
    :custom
    (ccls-executable "~/ccls/Release/ccls"))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package python
    :ensure nil
    :after lsp
    :hook
    (python-mode . lsp)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/python-executable)
    ;; Required for MacOS, prevents newlines from being displayed as ^G
    (python-shell-interpreter-args "--simple-prompt -c exec('__import__(\\'readline\\')') -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat ign/python-executable " -m pdb"))
    (py-split-window-on-execute t))

  (use-package cython-mode)
  (use-package flycheck-cython)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)

  (use-package expand-region)
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :custom
    (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

* Bindings

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :bind
    ("C-h" . hydra-help/body)
    ("M-m" . hydra-leader/body))

  (defhydra hydra-config (:color blue :hint none)
    "
  _e_: Edit configuration
  _g_: Refresh current buffer
  _r_: Reload Emacs
    "
    ("e" ign/edit-config)
    ("g" ign/refresh-buffer)
    ("r" ign/reload))

  (defhydra hydra-help (:color blue :hint none)
    "
  Bindings        | Describes       | Others
  --------------- | --------------- | ------------------
  _b_: Top level    | _f_: Function     | _l_: Command history
  _m_: Major mode   | _v_: Variable     |
                  | _k_: Key          |
    "
    ("f" describe-function)
    ("k" describe-key-briefly)
    ("l" view-lossage)
    ("v" describe-variable))

  (defhydra hydra-projectile (:color blue :hint none)
    "
  _a_: Find other file    | _e_: Recent Files     | _k_: Kill buffers
  _b_: Switch buffer      | _f_: Find File        | _p_: Switch project
  _c_: Compile            | _g_: Grep             | _t_: Impl ↔ Test
  _d_: Find directory     |                     | _v_: Version control
    "
    ("a" projectile-find-other-file)
    ("b" projectile-switch-to-buffer)
    ("c" projectile-compile-project)
    ("d" projectile-find-dir)
    ("e" projectile-recentf)
    ("f" projectile-find-file)
    ("g" projectile-grep)
    ("j" projectile-find-tag)
    ("k" projectile-kill-buffers)
    ("p" projectile-switch-project)
    ("t" projectile-toggle-between-implementation-and-test)
    ("v" projectile-vc))

  (defhydra hydra-avy (:exit t :hint nil)
    "
  Line          | Region        | Goto
  ------------- | ------------- | ------------------------------
  _y_: Yank       | _Y_: Yank       | _c_: Char Timed   _C_: Char
  _m_: Move       | _M_: Move       | _w_: Word         _W_: Word*
  _k_: Kill       | _K_: Kill       | _l_: Line         _L_: End of Line
    "
    ("c" avy-goto-char-timer)
    ("C" avy-goto-char)
    ("w" avy-goto-word-1)
    ("W" avy-goto-word-0)
    ("l" avy-goto-line)
    ("L" avy-goto-end-of-line)
    ("m" avy-move-line)
    ("M" avy-move-region)
    ("k" avy-kill-whole-line)
    ("K" avy-kill-region)
    ("y" avy-copy-line)
    ("Y" avy-copy-region))

  (defhydra hydra-leader (:color blue :hint none)
    "
  ---------------------- | --------------- | --------------- | -----------
  _RET_: Configuration     | _a_: Avy          | _g_: Magit        | _t_: Terminal
  _SPC_: Expand Region     |                 | _p_: Projectile   |
    "
    ("RET" hydra-config/body)
    ("SPC" er/expand-region)
    ("a" hydra-avy/body)
    ("g" magit-status)
    ("p" hydra-projectile/body)
    ("t" ign/term-toggle))
#+END_SRC

* Community

** Browser

#+BEGIN_SRC emacs-lisp
  (setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode))
#+END_SRC
